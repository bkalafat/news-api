using System;
using System.Text;
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using NewsApi.Application.Services;
using NewsApi.Application.Validators;
using NewsApi.Domain.Interfaces;
using NewsApi.Infrastructure.Caching;
using NewsApi.Infrastructure.Data;
using NewsApi.Infrastructure.Data.Configurations;
using NewsApi.Infrastructure.Data.Repositories;
using NewsApi.Infrastructure.HealthChecks;
using NewsApi.Infrastructure.Security;
using NewsApi.Infrastructure.Services;

namespace NewsApi.Presentation.Extensions;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddApplicationServices(
        this IServiceCollection services,
        IConfiguration configuration
    )
    {
        // MongoDB Configuration
        var mongoDbSettings = new MongoDbSettings();
        configuration.GetSection("MongoDbSettings").Bind(mongoDbSettings);
        services.AddSingleton(mongoDbSettings);
        services.AddSingleton<MongoDbContext>();

        // Repository Pattern
        services.AddScoped<INewsArticleRepository, NewsArticleRepository>();
        services.AddScoped<INewsArticleService, NewsArticleService>();
        services.AddScoped<ISocialMediaPostRepository, SocialMediaPostRepository>();
        services.AddScoped<ISocialMediaPostService, SocialMediaPostService>();

        // Caching
        services.AddMemoryCache();
        services.AddScoped<ICacheService, CacheService>();

        // FluentValidation
        services.AddFluentValidationAutoValidation();
        services.AddFluentValidationClientsideAdapters();
        services.AddValidatorsFromAssemblyContaining<CreateNewsArticleDtoValidator>();

        // MinIO Image Storage
        var minioSettings = new MinioSettings();
        configuration.GetSection("MinioSettings").Bind(minioSettings);
        services.AddSingleton(minioSettings);
        services.AddSingleton<IImageStorageService, MinioImageStorageService>();

        // Social Media Services
        services.AddHttpClient<RedditService>();

        return services;
    }

    public static IServiceCollection AddJwtAuthentication(
        this IServiceCollection services,
        IConfiguration configuration
    )
    {
        var jwtSettings = configuration.GetSection("JwtSettings");
        var secretKey = jwtSettings["SecretKey"];

        // If SecretKey is not configured, provide a sensible default for development/testing environments
        // In production, this MUST be set via configuration or environment variables
        if (string.IsNullOrEmpty(secretKey))
        {
            secretKey = "default-test-secret-key-for-development-only-32-chars-minimum";
        }

        var issuer = jwtSettings["Issuer"] ?? "NewsPortal";
        var audience = jwtSettings["Audience"] ?? "NewsPortalClients";

        // Detect testing environment to relax some validation rules for integration tests
        var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? string.Empty;
        var isTesting = string.Equals(env, "Testing", StringComparison.OrdinalIgnoreCase);

        services.AddSingleton(new JwtTokenService(secretKey, issuer, audience));

        services
            .AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.RequireHttpsMetadata = false; // Set to true in production
                options.SaveToken = true;
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    // In testing environment we allow skipping issuer/audience validation so that
                    // tokens generated by the test helper are accepted even if claims differ.
                    ValidateIssuer = !isTesting,
                    ValidateAudience = !isTesting,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = issuer,
                    ValidAudience = audience,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)),
                    ClockSkew = TimeSpan.Zero,
                };
            });

        return services;
    }

    public static IServiceCollection AddCorsPolicy(this IServiceCollection services)
    {
        services.AddCors(options =>
        {
            options.AddPolicy(
                "AllowSpecificOrigins",
                builder =>
                {
                    builder
                        .WithOrigins(
                            "http://localhost:3000",
                            "http://localhost:3001",
                            "https://haberibul.azurewebsites.net",
                            "https://clever-speculoos-aacb3a.netlify.app"
                        )
                        .AllowAnyMethod()
                        .AllowAnyHeader()
                        .AllowCredentials();
                }
            );
        });

        return services;
    }

    public static IServiceCollection AddCustomHealthChecks(this IServiceCollection services)
    {
        services
            .AddHealthChecks()
            .AddCheck("self", () => Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Healthy())
            .AddCheck<MongoHealthCheck>("mongodb");

        return services;
    }
}
